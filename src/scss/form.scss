.field-group {
  display: flex;
  flex-wrap: wrap;
  flex: auto;
  height: fit-content;
}

.field-group::before,
.field-group::after {
  font-size: var(--fontXS);
  max-width: 100px;
  min-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
}

.field-group::before {
  content: attr(label);
}

.field-group::after {
  content: attr(message);
}

// input-group
.input-group {
  flex: 1;
  display: flex;
  align-items: center;
  padding: 0 !important;
}

.input-group .input,
.input-group .input:focus {
  border: none;
  box-shadow: none;
}

.input-group > * {
  line-height: 0;
}

.input-group > :first-child {
  padding-left: 1rem;
}
.input-group > :last-child {
  padding-right: 1rem;
}

.input-group > *:not(.input, :first-child, :last-child) {
  padding-left: 0.5rem;
  padding-right: 0.5rem;
}

// checkbox, radio, switch
.checkbox,
.radio,
.switch {
  @include border;
  @include background;

  appearance: none;
  border-radius: 0.175rem;
  height: var(--fontMD);
  width: var(--fontMD);
}

.checkbox:is(:checked, :indeterminate),
.radio:checked,
.switch:checked {
  background-color: rgb(map-get($states-colors, "primary"));
  border-color: rgb(map-get($states-colors, "primary"));
}

// checkbox
.checkbox:checked {
  background-image: var(--form-checkbox-checked-bg);
}

.checkbox:indeterminate {
  background-image: var(--form-checkbox-indeterminate-bg);
}

// radio
.radio {
  border-radius: var(--roundedFull);
}
.radio:checked {
  background-image: var(--form-radio-checked-bg);
}

// switch
.switch {
  padding: var(--spacingMD);
  width: auto;
  height: auto;
  border-radius: var(--roundedFull);
  background-image: var(--form-switch-checked-bg);
  background-position: left center;
  background-repeat: no-repeat;
}

.switch:checked {
  --form-switch-checked-bg: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e") !important;
  background-position: right center;
}

// input, addon
.input,
.addon {
  @include border;
  @include fontsize;
  @include roundedCornersX;

  padding: var(--spacingSM);
  background-color: transparent;
  outline: none;

  &:focus-within {
    border-color: rgb(var(--borderPrimary));
    box-shadow: 0 0 0 1px rgb(var(--borderPrimary));
  }
}

// input
.input {
  flex: 1;
  z-index: 1;
}

.field-group .input {
  width: 1px;
}

.field-group > .input + .input {
  border-left: none;
}

// addon
.addon {
  align-items: center;
  background-color: rgb(var(--backgroundSecondary));
  display: flex;
  justify-content: center;
}

.field-group > .addon:not(:last-child) {
  border-right: none;
}

.field-group > .input + .addon {
  border-left: none;
}

// styles
@each $state in $states {
  .field-group-#{$state}::before,
  .field-group-#{$state}::after {
    color: rgb(map-get($states-colors, $state));
  }
  .field-group-#{$state} > .input {
    border-color: rgb(map-get($states-colors, $state)) !important;
    box-shadow: 0 0 0 1px rgb(map-get($states-colors, $state)) !important;
  }
}

.dark .input {
  color-scheme: dark;
}

.dark .input option {
  background-color: rgb(var(--backgroundTertiary));
}
