@use "sass:map";
@use "./global" as *;

// core
// background
.bg-primary {
  background-color: rgb(var(--backgroundPrimary));
}
.bg-secondary {
  background-color: rgb(var(--backgroundSecondary));
}
.bg-tertiary {
  background-color: rgb(var(--backgroundTertiary));
}
.bg-theme {
  background-color: rgb(var(--theme500));
}
.bg-success {
  background-color: rgb(var(--green500));
}
.bg-error {
  background-color: rgb(var(--red500));
}
.bg-warn {
  background-color: rgb(var(--amber500));
}

// contents
.text-primary {
  color: rgb(var(--contentPrimary));
}
.text-secondary {
  color: rgb(var(--contentSecondary));
}
.text-theme {
  color: rgb(var(--contentTheme));
}
.text-success {
  color: rgb(var(--contentSuccess));
}
.text-error {
  color: rgb(var(--contentError));
}
.text-warn {
  color: rgb(var(--contentWarn));
}

// borders
.border-secondary {
  border-color: rgb(var(--borderSecondary));
}
.border-theme {
  border-color: rgb(var(--borderTheme));
}
.border-success {
  border-color: rgb(var(--green500));
}
.border-error {
  border-color: rgb(var(--red500));
}
.border-warn {
  border-color: rgb(var(--amber500));
}

// styles
@each $state in $states {
  // solid
  .style-solid-#{$state} {
    background-color: rgb(map.get($states-colors, $state));
    color: rgb(var(--backgroundPrimary));

    > * {
      color: inherit;
    }

    &:hover {
      background-color: rgb(map.get($states-colors, #{$state}Dark));
    }
  }

  // soft
  .style-soft-#{$state} {
    background-color: rgba(map.get($states-colors, $state), 0.15);
    border-color: transparent;
    color: rgb(map.get($states-colors, #{$state}Content));

    > * {
      color: inherit;
    }

    &:hover {
      background-color: rgba(map.get($states-colors, $state), 0.2);
    }
  }

  // outline
  .style-outline-#{$state} {
    background-color: transparent;
    border-color: rgb(map.get($states-colors, $state));
    color: rgb(map.get($states-colors, $state));

    > * {
      color: inherit;
    }

    &:hover {
      background-color: rgba(map.get($states-colors, $state), 0.05);
    }
  }
  .dark .style-outline-#{$state}:hover {
    background-color: rgba(map.get($states-colors, $state), 0.15);
  }

  // link
  .style-link-#{$state} {
    border: none;
    color: rgb(map.get($states-colors, $state));

    > * {
      color: inherit;
    }

    &:hover {
      color: rgb(map.get($states-colors, #{$state}Dark));
      text-decoration: underline;
      text-underline-offset: 0.3rem;
    }
  }
}

// white
.style-white {
  background: rgb(var(--backgroundPrimary));
  border-color: rgb(var(--borderSecondary));
  color: rgb(var(--contentPrimary));

  > * {
    color: inherit;
  }

  &:hover {
    background: rgba(var(--contentPrimary), 0.05);
  }
}

.dark .style-white:hover {
  background: rgba(var(--contentPrimary), 0.1);
}

// black
.style-black {
  background: rgb(var(--contentPrimary));
  color: rgb(var(--backgroundPrimary));

  > * {
    color: inherit;
  }

  &:hover {
    background: rgba(var(--contentPrimary), 0.8);
  }
}

.dark .style-black:hover {
  background: rgba(var(--contentPrimary), 0.9);
}
